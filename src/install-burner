#!/bin/sh
# $Id$

# Script to create or update the burner device
# Called from userhook0 with the CONFIGNAME to be burned
# passed as a parameter
BURN_CONFIG=$1


# If we're plugged into a gateway, then presumably there's some
# remote-updating going on.  Silently continue.
if [ -e /psp/gateway ]
then
    return
fi



imgtool --mode=draw --fill=255,255,0
if [ -e /psp/burning ]
then
    PROCESS=update
else
    PROCESS=create
fi
fbwrite "Starting burner ${PROCESS} process for ${BURN_CONFIG}..."

cpid -d


# Remove the previous /mnt/storage/factory and re-create it
rm -rf /mnt/storage/factory
cp -a /mnt/usb/factory /mnt/storage



# Remove existing symlinks.
rm -f /psp/udev/39-chumby-early.rules
rm -f /psp/rfs1/userhook0
mkdir -p /psp/rfs1


# Set up symlinks to the udev rules
# Create a stub userhook0 that runs the actual burner userhook0 with BURN_CONFIG
ln -s /mnt/storage/factory/39-chumby-early.rules /psp/udev/39-chumby-early.rules
echo "#!/bin/sh
# Generated by install-burner for BURN_CONFIG=${BURN_CONFIG}
. /mnt/storage/factory/userhook0 ${BURN_CONFIG}" > /psp/rfs1/userhook0
chmod 755 /psp/rfs1/userhook0

# Calculate the partial md5sum.
dd skip=1 if=/mnt/storage/factory/rom-${BURN_CONFIG}.img bs=1M count=100 | md5sum | cut -d' ' -f1 > /mnt/storage/factory/rom-${BURN_CONFIG}.img.md5

# Save a receipt of the log
(echo ${PROCESS} ; echo burner ; guidgen.sh ; chumby_version -f ; chumby_version -n ; chumby_version -s ; chumby_version -h ; md5sum /mnt/storage/factory/rom-${BURN_CONFIG}.img | awk '{print $1}' ) | tr '\n' '|' | tr A-Za-z N-ZA-Mn-za-m > /tmp/log.txt
echo "" >> /tmp/log.txt
cat /tmp/log.txt >> /mnt/usb/log.txt
cat /tmp/log.txt >> /mnt/storage/log.txt


# Indicate that this is a burning unit.
touch /psp/burning
touch /psp/start_sshd
touch /psp/usb_fb_hack

imgtool --mode=draw --fill=0,255,0
fbwrite "Burner successfully ${PROCESS}d"
halt

# Exit to prevent the burner from overwriting the update image.
exit 0

